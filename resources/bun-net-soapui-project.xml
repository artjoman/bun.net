<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="2b22524e-a4b4-41a4-8a0f-fe004b4940db" activeEnvironment="Default" name="bun.net" resourceRoot="" soapui-version="5.3.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="c260ddea-3ede-4b72-825b-749b3f132a8d" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://bun.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://bun.net</con:endpoint><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints><con:resource name="getPartyList" path="/party" id="5e87fadc-71a5-4bfb-a787-c737fb9f0f34"><con:settings/><con:parameters/><con:method name="Party 1" id="36886e67-ed08-4d6f-b5d9-00dc5ca6da68" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="7071c153-de92-4274-b200-de13f9a973c5" mediaType="application/json"><con:settings/><con:endpoint>http://bun.net</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="getParty" path="/party/{partyId}" id="7dfebb8c-14fb-453a-b116-7cdb71be9bb5"><con:settings/><con:parameters><con:parameter><con:name>partyId</con:name><con:value>partyId</con:value><con:style>TEMPLATE</con:style><con:default>partyId</con:default></con:parameter></con:parameters><con:method name="Method 1" id="3963ff84-02b3-4718-8e3a-6755bdaaaa77" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="60fcfe7b-0b71-4cd8-9f84-d4fe4c30082f" mediaType="application/json"><con:settings/><con:endpoint>http://bun.net</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="createParty" path="/party" id="a772ce3b-0803-42cd-bb1a-2a987ff3813b"><con:settings/><con:parameters/><con:method name="Method 1" id="c5b7c493-183e-418a-bba7-a624a1f2d004" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:request name="Request 1" id="d5a4fea3-d9cf-40a0-9758-e9e2bbd802f0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://bun.net</con:endpoint><con:request>{
  "partyId": "1a",
  "partyName": "John Doe",
  "partyType": "1",
  "phone": "1",
  "email": "john.doe@example.com",
  "status": "1"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="updateParty" path="/party/{partyId}" id="01fff6c0-4bbe-4f3e-bf5b-202ff7e448a3"><con:settings/><con:parameters><con:parameter><con:name>partyId</con:name><con:value>partyId</con:value><con:style>TEMPLATE</con:style><con:default>partyId</con:default></con:parameter></con:parameters><con:method name="Method 1" id="1716032a-b4a5-401e-a1c2-1456291582c3" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="cd516c55-4282-4110-bbac-14c625d98390" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://bun.net</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="getBunList" path="/party/{partyId}/bun" id="e64d2908-4df2-4958-b2df-9fc070bd91d8"><con:settings/><con:parameters><con:parameter><con:name>partyId</con:name><con:value>partyId</con:value><con:style>TEMPLATE</con:style><con:default>partyId</con:default></con:parameter></con:parameters><con:method name="Method 1" id="6c8f9bb5-f489-45ea-b182-f9a27557400c" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:request name="Request 1" id="a9ca42ff-0943-43d0-8bbb-9b6d727651c5" mediaType="application/json"><con:settings/><con:endpoint>http://bun.net</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="createBun" path="/party/{partyId}/bun" id="d3d9488c-bda6-4d3f-84ce-22399e9b55c6"><con:settings/><con:parameters><con:parameter><con:name>partyId</con:name><con:value>partyId</con:value><con:style>TEMPLATE</con:style><con:default>partyId</con:default></con:parameter></con:parameters><con:method name="Method 1" id="ebf3e243-f987-4a4d-958d-bd4aec1bc572" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="9fdd0101-f6ee-468a-a4a2-d0c58751f9d6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://bun.net</con:endpoint><con:request>{
  "partyId": "1a",
  "quantity": "1",
  "productType": "1",
  "time": "2002-05-30T09:30:10",
  "location": "1",
  "source": "1"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:WsdlInterface" id="43e418ec-4d43-4f8f-8762-c3ca29d848d1" wsaVersion="NONE" name="BunPortSOAP11Binding" type="wsdl" bindingName="{http://bun.net/schema/v1}BunPortSOAP11Binding" soapVersion="1_1" anonymous="optional" definition="file:/C:/OneDrive/git/bun.net/resources/bun.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/OneDrive/git/bun.net/resources/bun.wsdl"><con:part><con:url>file:/C:/OneDrive/git/bun.net/resources/bun.wsdl</con:url><con:content><![CDATA[<definitions targetNamespace="http://bun.net/schema/v1" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://bun.net/schema/v1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/">
  <types>
    <xsd:schema targetNamespace="http://bun.net/schema/v1" elementFormDefault="qualified">
      <xsd:include schemaLocation="Bun.xsd"/>
    </xsd:schema>
  </types>
  <message name="GetPartyListRequest"/>
  <message name="GetPartyListResponse">
    <part name="PartyList" element="tns:PartyList"/>
  </message>
  <message name="GetPartyRequest">
    <part name="PartyId" type="xsd:string"/>
  </message>
  <message name="GetPartyResponse">
    <part name="Party" element="tns:Party"/>
  </message>
  <message name="CreatePartyRequest">
    <part name="Party" element="tns:Party"/>
  </message>
  <message name="CreatePartyResponse">
    <part name="Status" element="tns:Status"/>
  </message>
  <message name="UpdatePartyRequest">
    <part name="Party" element="tns:Party"/>
  </message>
  <message name="UpdatePartyResponse">
    <part name="Status" element="tns:Status"/>
  </message>
  <message name="GetBunListRequest">
    <part name="PartyId" type="xsd:string"/>
  </message>
  <message name="GetBunListResponse">
    <part name="BunList" element="tns:BunList"/>
  </message>
  <message name="CreateBunRequest">
    <part name="Bun" element="tns:Bun"/>
  </message>
  <message name="CreateBunResponse">
    <part name="Status" element="tns:Status"/>
  </message>
  <portType name="BunPortType">
    <operation name="getPartyList">
      <input message="tns:GetPartyListRequest"/>
      <output message="tns:GetPartyListResponse"/>
    </operation>
    <operation name="getParty">
      <input message="tns:GetPartyRequest"/>
      <output message="tns:GetPartyResponse"/>
    </operation>
    <operation name="createParty">
      <input message="tns:CreatePartyRequest"/>
      <output message="tns:CreatePartyResponse"/>
    </operation>
    <operation name="updateParty">
      <input message="tns:UpdatePartyRequest"/>
      <output message="tns:UpdatePartyResponse"/>
    </operation>
    <operation name="getBunList">
      <input message="tns:GetBunListRequest"/>
      <output message="tns:GetBunListResponse"/>
    </operation>
    <operation name="createBun">
      <input message="tns:CreateBunRequest"/>
      <output message="tns:CreateBunResponse"/>
    </operation>
  </portType>
  <binding name="BunPortSOAP11Binding" type="tns:BunPortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="getPartyList">
      <soap:operation/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getParty">
      <soap:operation/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="createParty">
      <soap:operation/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="updateParty">
      <soap:operation/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getBunList">
      <soap:operation/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="createBun">
      <soap:operation/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
  </binding>
  <service name="BunService">
    <port name="BunPort" binding="tns:BunPortSOAP11Binding"/>
  </service>
</definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>file:\C:\OneDrive\git\bun.net\resources\Bun.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="http://bun.net/schema/v1" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://bun.net/schema/v1" xmlns:tns="http://bun.net/schema/v1">
  <xs:element name="BunList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="tns:Bun" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Bun">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="PartyId" type="xs:string" minOccurs="0"/>
        <xs:element name="Quantity" type="xs:integer"/>
        <xs:element name="ProductType" type="xs:integer"/>
        <xs:element name="Time" type="xs:dateTime"/>
        <xs:element name="Location" type="xs:integer"/>
        <xs:element name="Source" type="xs:integer"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="PartyList">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="tns:Party" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Party">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="PartyId" type="xs:string" minOccurs="0"/>
        <xs:element name="PartyName" type="xs:string"/>
        <xs:element name="PartyType" type="xs:integer"/>
        <xs:element name="Phone" type="xs:string" minOccurs="0"/>
        <xs:element name="Email" type="xs:string" minOccurs="0"/>
        <xs:element name="Status" type="xs:integer" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Status">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Code" type="xs:integer"/>
        <!--0 if OK, -1 if unknown error, 1+ if knwon error-->
        <xs:element name="Message" type="xs:string" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://bun.net</con:endpoint><con:endpoint>http://localhost</con:endpoint></con:endpoints><con:operation id="44d0b258-1509-45e1-a618-8eaf5e815e41" isOneWay="false" action="" name="createParty" bindingOperationName="createParty" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="b2073563-66d0-42bd-8045-bd71957a2676" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:v1="http://bun.net/schema/v1">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <v1:Party>\r
         <!--Optional:-->\r
         <v1:PartyId>?</v1:PartyId>\r
         <v1:PartyName>?</v1:PartyName>\r
         <v1:PartyType>?</v1:PartyType>\r
         <!--Optional:-->\r
         <v1:Phone>?</v1:Phone>\r
         <!--Optional:-->\r
         <v1:Email>?</v1:Email>\r
         <!--Optional:-->\r
         <v1:Status>?</v1:Status>\r
      </v1:Party>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://bun.net/schema/v1/BunPortType/createPartyRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="05edd9f6-c9c7-4fcf-a6a3-91b29751a14d" isOneWay="false" action="" name="getParty" bindingOperationName="getParty" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="07e8ce2d-0c4c-4c05-a7fc-2da96bc7a564" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <PartyId>?</PartyId>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://bun.net/schema/v1/BunPortType/getPartyRequest"/></con:call></con:operation><con:operation id="0fad564c-b85f-4fe4-9969-afa1d47da8f2" isOneWay="false" action="" name="getPartyList" bindingOperationName="getPartyList" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="60260696-d06a-4edd-baf9-59ba4a679064" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:request>&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">\r
   &lt;soapenv:Header/>\r
   &lt;soapenv:Body/>\r
&lt;/soapenv:Envelope></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://bun.net/schema/v1/BunPortType/getPartyListRequest"/></con:call></con:operation><con:operation id="2250d818-a6d5-4437-bcce-a62c07bde9b6" isOneWay="false" action="" name="updateParty" bindingOperationName="updateParty" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="4a92c418-3f21-4d15-b199-f567d0456faf" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:v1="http://bun.net/schema/v1">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <v1:Party>\r
         <!--Optional:-->\r
         <v1:PartyId>?</v1:PartyId>\r
         <v1:PartyName>?</v1:PartyName>\r
         <v1:PartyType>?</v1:PartyType>\r
         <!--Optional:-->\r
         <v1:Phone>?</v1:Phone>\r
         <!--Optional:-->\r
         <v1:Email>?</v1:Email>\r
         <!--Optional:-->\r
         <v1:Status>?</v1:Status>\r
      </v1:Party>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://bun.net/schema/v1/BunPortType/updatePartyRequest"/></con:call></con:operation><con:operation id="1480ad62-c4cf-4101-85cf-59b2fd5ff3e3" isOneWay="false" action="" name="getBunList" bindingOperationName="getBunList" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="8596aa7d-4600-4159-af54-07d82b41b8de" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://bun.net</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <PartyId>?</PartyId>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://bun.net/schema/v1/BunPortType/getBunListRequest"/></con:call></con:operation><con:operation id="8956dbb2-8f8c-4e8d-9317-e4ff53e7aa77" isOneWay="false" action="" name="createBun" bindingOperationName="createBun" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="55b72a6d-ee2c-4922-8c0b-1ad6078cb2be" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://bun.net</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:v1="http://bun.net/schema/v1">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <v1:Bun>\r
         <!--Optional:-->\r
         <v1:PartyId>?</v1:PartyId>\r
         <v1:Quantity>?</v1:Quantity>\r
         <v1:ProductType>?</v1:ProductType>\r
         <v1:Time>?</v1:Time>\r
         <v1:Location>?</v1:Location>\r
         <v1:Source>?</v1:Source>\r
      </v1:Bun>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://bun.net/schema/v1/BunPortType/createBunRequest"/></con:call></con:operation></con:interface><con:testSuite id="4db20da6-e675-45dd-be41-e2514684f2a7" name="http://bun.net REST TestSuite"><con:description>TestSuite generated for REST Service [http://bun.net]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="0c784550-6330-4d47-b47b-668594435412" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getPartyList TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [getPartyList] located at [/party]</con:description><con:settings/><con:testStep type="restrequest" name="Request 1" id="619d7521-64ac-4cdd-a317-3c21171a6bd9"><con:settings/><con:config service="http://bun.net" resourcePath="/party" methodName="Party 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1" id="7071c153-de92-4274-b200-de13f9a973c5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/party</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09bd0589-9deb-469d-a40d-f9971bd4a37e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="1b61123a-e67a-4251-8935-e97e81790744" name="Contains"><con:configuration><token>partyList</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="81c8d23d-17ca-4ff8-bf90-1d58a90c280d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getParty TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [getParty] located at [/party/{partyId}]</con:description><con:settings/><con:testStep type="restrequest" name="Request 1" id="85ae29b8-5c84-4d53-abb9-e0cd5ad903c1"><con:settings/><con:config service="http://bun.net" resourcePath="/party/{partyId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1" id="60fcfe7b-0b71-4cd8-9f84-d4fe4c30082f" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/party/partyId</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e532c9c2-d397-4991-b913-26a3d4e9a57e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ffbc019d-83fe-46f2-8306-3945c0bfdce5" name="Contains"><con:configuration><token>partyId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="11fecbac-ed10-4391-9d9f-c333a6a27c0c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="createParty TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [createParty] located at [/party]</con:description><con:settings/><con:testStep type="restrequest" name="Request 1" id="ff071e18-4860-4509-9c2e-d235b318c981"><con:settings/><con:config service="http://bun.net" resourcePath="/party" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1" id="d5a4fea3-d9cf-40a0-9758-e9e2bbd802f0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request>{
  "partyId": "1",
  "partyName": "John Doe",
  "partyType": "1",
  "phone": "1",
  "email": "john.doe@example.com",
  "status": "1"
}</con:request><con:originalUri>http://localhost/party</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="560fa868-65d6-47d1-b2eb-ace2b8169784" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5bad85b9-8c30-494e-bd80-5eee95713ff5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="updateParty TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [updateParty] located at [/party/{partyId}]</con:description><con:settings/><con:testStep type="restrequest" name="Request 1" id="d66d7d82-85e0-4083-ab21-6149106f96a9"><con:settings/><con:config service="http://bun.net" resourcePath="/party/{partyId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1" id="cd516c55-4282-4110-bbac-14c625d98390" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/party/partyId</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e3141b8e-164a-4eec-9d05-7496ca87971f" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="c25e2ea8-6573-4ad3-a9ca-9fbd7abacf12" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getBunList TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [getBunList] located at [/party/{partyId}/bun]</con:description><con:settings/><con:testStep type="restrequest" name="Request 1" id="7e10673d-91fc-42ff-a857-735f0490fa08"><con:settings/><con:config service="http://bun.net" resourcePath="/party/{partyId}/bun" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1" id="a9ca42ff-0943-43d0-8bbb-9b6d727651c5" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/party/partyId/bun</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4a18c41b-fa43-44ab-bd34-bce4a7acac60" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="208c418e-863e-47f5-ab6e-e57f735adf78" name="Contains"><con:configuration><token>bunList</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5fd88d1e-7f8e-4c9b-8e1b-ae7382e6f538" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="createBun TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [createBun] located at [/party/{partyId}/bun]</con:description><con:settings/><con:testStep type="restrequest" name="Request 1" id="8845dde4-c97c-447b-88d3-c18cee7a7c84"><con:settings/><con:config service="http://bun.net" resourcePath="/party/{partyId}/bun" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1" id="9fdd0101-f6ee-468a-a4a2-d0c58751f9d6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/party/partyId/bun</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2d612d0e-71af-4908-b382-b93a675ee498" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="df5386ae-af8c-4c1d-bce3-2528c52b1b2c" port="8080" path="/" host="localhost" name="REST MockService" docroot=""><con:settings/><con:properties/><con:restMockAction name="/party" method="GET" resourcePath="/party" id="7b9d6899-1bdb-4f2f-8f48-15705d8dcb01"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="603c9156-25db-4286-880f-06a211d90c26" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "partyList": [
    {
      "partyId": "1a",
      "partyName": "John Doe",
      "partyType": "1",
      "phone": "1",
      "email": "john.doe@example.com",
      "status": "1"
    },
    {
      "partyId": "2b",
      "partyName": "John Doe2",
      "partyType": "2",
      "phone": "2",
      "email": "john.doe2@example.com",
      "status": "2"
    }
  ]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/party/partyId" method="GET" resourcePath="/party/partyId" id="56ff476a-85f9-44af-a91d-f53dafa771cd"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="8bb91413-3738-4c93-ae04-95d4e77152c6" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "partyId": "1a",
  "partyName": "John Doe",
  "partyType": "1",
  "phone": "1",
  "email": "john.doe@example.com",
  "status": "1"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/party" method="POST" resourcePath="/party" id="2af3c044-23a2-49ef-97ee-e5672297338d"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="ebf9ea82-64d0-4fc6-9f5b-5893fd3be013" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/party/partyId" method="POST" resourcePath="/party/partyId" id="3cbc91ff-f693-4827-bf82-c9164a9aa452"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="e0665d0d-69e6-4337-86a3-a3b4dbddc1e1" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/party/partyId/bun" method="GET" resourcePath="/party/partyId/bun" id="9748c95b-a390-4ec5-bcf9-38300620450b"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="c5b39cc2-dd2c-4530-97ce-d8762ce8600e" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "bunList": [
    {
      "partyId": "1a",
      "quantity": "1",
      "productType": "1",
      "time": "2002-05-30T09:30:10",
      "location": "1",
      "source": "1"
    },
    {
      "partyId": "2b",
      "quantity": "2",
      "productType": "2",
      "time": "2002-05-30T09:30:11",
      "location": "2",
      "source": "2"
    }
  ]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/party/partyId/bun" method="POST" resourcePath="/party/partyId/bun" id="ade0ea55-bb3a-4975-884c-98715571b740"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="f979300d-3af7-4d25-a4cd-7c64c06267b2" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:responseContent/></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>